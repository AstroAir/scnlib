<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>args.h</name>
    <filename>args_8h.html</filename>
    <class kind="class">scn::basic_scan_arg</class>
    <class kind="class">scn::basic_scan_arg::handle</class>
    <class kind="class">scn::scan_arg_store</class>
    <class kind="class">scn::basic_scan_args</class>
    <namespace>scn</namespace>
    <namespace>scn::detail</namespace>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>visit_scan_arg</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>aaef2be62bdb069536e2729b6bb4d7f1c</anchor>
      <arglist>(Visitor &amp;&amp;vis, basic_scan_arg&lt; Ctx &gt; &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>make_scan_args</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>abfa0ace2ff551e76af6128040195010d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>make_scan_args</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>a47bcbc8d33e38e412b1f87ec7ed3cc96</anchor>
      <arglist>(std::tuple&lt; Args... &gt; &amp;&amp;values)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::basic_format_string</name>
    <filename>classscn_1_1basic__format__string.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>scn::basic_istream_scanner</name>
    <filename>structscn_1_1basic__istream__scanner.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>scn::detail::basic_range_streambuf</name>
    <filename>classscn_1_1detail_1_1basic__range__streambuf.html</filename>
    <templarg></templarg>
    <base>basic_streambuf&lt; detail::char_t&lt; SourceRange &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>scn::detail::basic_runtime_format_string</name>
    <filename>structscn_1_1detail_1_1basic__runtime__format__string.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>scn::basic_scan_arg</name>
    <filename>classscn_1_1basic__scan__arg.html</filename>
    <templarg></templarg>
    <class kind="class">scn::basic_scan_arg::handle</class>
    <member kind="function">
      <type>constexpr</type>
      <name>basic_scan_arg</name>
      <anchorfile>classscn_1_1basic__scan__arg.html</anchorfile>
      <anchor>a44d0fb24270445ce71e0acf2b7244a7b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classscn_1_1basic__scan__arg.html</anchorfile>
      <anchor>a7ad80a65f90fd3ccfee1bb895a7cb45d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::basic_scan_args</name>
    <filename>classscn_1_1basic__scan__args.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>basic_scan_args</name>
      <anchorfile>classscn_1_1basic__scan__args.html</anchorfile>
      <anchor>aceef198d06e0f4372a81aadfe63c3f90</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>basic_scan_args</name>
      <anchorfile>classscn_1_1basic__scan__args.html</anchorfile>
      <anchor>a4616a3805721fcbdf6fed9fe21b5292f</anchor>
      <arglist>(scan_arg_store&lt; Context, Args... &gt; &amp;store)</arglist>
    </member>
    <member kind="function">
      <type>constexpr basic_scan_arg&lt; Context &gt;</type>
      <name>get</name>
      <anchorfile>classscn_1_1basic__scan__args.html</anchorfile>
      <anchor>a1bb2c528090351e09bbdbb7655cc27c3</anchor>
      <arglist>(std::size_t id) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>classscn_1_1basic__scan__args.html</anchorfile>
      <anchor>a1dbb82b6cb70ce6ccd29cd8369d892df</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::basic_scan_context</name>
    <filename>classscn_1_1basic__scan__context.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CharT</type>
      <name>char_type</name>
      <anchorfile>classscn_1_1basic__scan__context.html</anchorfile>
      <anchor>a841754690355777f4908a0ac32225b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scanner&lt; T, char_type &gt;</type>
      <name>scanner_type</name>
      <anchorfile>classscn_1_1basic__scan__context.html</anchorfile>
      <anchor>ab4c2fa773d43626ed477e1a1a7d7a6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classscn_1_1basic__scan__context.html</anchorfile>
      <anchor>a849014a08f5f31c89b2d819adbe35b1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance_to</name>
      <anchorfile>classscn_1_1basic__scan__context.html</anchorfile>
      <anchor>a4e54c3141f24b3189d17da1f82bde263</anchor>
      <arglist>(iterator it)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::basic_scan_parse_context</name>
    <filename>classscn_1_1basic__scan__parse__context.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>basic_scan_parse_context</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>addb0e257dc2abd7f78de48707f5a7b84</anchor>
      <arglist>(std::basic_string_view&lt; CharT &gt; format, int next_arg_id=0)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>begin</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>ad50abf46509743cb5acd10c37e2e76b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>end</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>a27613344c5dca87da4ded31dcb3ec6a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>advance_to</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>a206877196ee14806f50c2af5f271865f</anchor>
      <arglist>(iterator it)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::detail::compile_parse_context</name>
    <filename>classscn_1_1detail_1_1compile__parse__context.html</filename>
    <templarg></templarg>
    <base>scn::basic_scan_parse_context</base>
    <member kind="function">
      <type>constexpr auto</type>
      <name>begin</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>ad50abf46509743cb5acd10c37e2e76b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>end</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>a27613344c5dca87da4ded31dcb3ec6a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>advance_to</name>
      <anchorfile>classscn_1_1basic__scan__parse__context.html</anchorfile>
      <anchor>a206877196ee14806f50c2af5f271865f</anchor>
      <arglist>(iterator it)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>scn::discard</name>
    <filename>structscn_1_1discard.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>scn::expected</name>
    <filename>classscn_1_1expected.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>expected</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a6f2f302f05730a53c5e080398a01c4e1</anchor>
      <arglist>(U &amp;&amp;val)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>expected</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a9be136013b9dc083a4f0edd52de4b9ec</anchor>
      <arglist>(std::in_place_t, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>expected</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a9a4a554f55ff36b103a63d30999efa1e</anchor>
      <arglist>(unexpect_t, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>af56e7e1f1caa4e01f15310fe32ac48df</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr error_type &amp;</type>
      <name>error</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a1cf23a75fd9e87a66d4e5539e0d3b968</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr U &amp;</type>
      <name>value</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>aa759914c72bd6b9137bff5073d8ced85</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr U &amp;</type>
      <name>operator*</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a07d7a97f1258d71bc27d2810f8278639</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a6d9136e7cdeb7bbc8a8681a18cb807a9</anchor>
      <arglist>(U &amp;&amp;default_value) const &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>expected&lt; T, scan_error &gt;</name>
    <filename>classscn_1_1expected.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>expected</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a6f2f302f05730a53c5e080398a01c4e1</anchor>
      <arglist>(U &amp;&amp;val)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>expected</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a9be136013b9dc083a4f0edd52de4b9ec</anchor>
      <arglist>(std::in_place_t, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>expected</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a9a4a554f55ff36b103a63d30999efa1e</anchor>
      <arglist>(unexpect_t, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>af56e7e1f1caa4e01f15310fe32ac48df</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr error_type &amp;</type>
      <name>error</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a1cf23a75fd9e87a66d4e5539e0d3b968</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr U &amp;</type>
      <name>value</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>aa759914c72bd6b9137bff5073d8ced85</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr U &amp;</type>
      <name>operator*</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a07d7a97f1258d71bc27d2810f8278639</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a6d9136e7cdeb7bbc8a8681a18cb807a9</anchor>
      <arglist>(U &amp;&amp;default_value) const &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::basic_scan_arg::handle</name>
    <filename>classscn_1_1basic__scan__arg_1_1handle.html</filename>
    <member kind="function">
      <type>scan_error</type>
      <name>scan</name>
      <anchorfile>classscn_1_1basic__scan__arg_1_1handle.html</anchorfile>
      <anchor>a5820b344c68d104fc697a72dab9cb848</anchor>
      <arglist>(typename Context::parse_context_type &amp;parse_ctx, Context &amp;ctx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>scn::invalid_input_range</name>
    <filename>structscn_1_1invalid__input__range.html</filename>
  </compound>
  <compound kind="struct">
    <name>scn::monostate</name>
    <filename>structscn_1_1monostate.html</filename>
  </compound>
  <compound kind="class">
    <name>scn::scan_arg_store</name>
    <filename>classscn_1_1scan__arg__store.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="friend" protection="private">
      <type>constexpr friend auto</type>
      <name>make_scan_args</name>
      <anchorfile>classscn_1_1scan__arg__store.html</anchorfile>
      <anchor>a3abd0cdf0bb62e5834bd563d9c6edd9a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scn::scan_error</name>
    <filename>classscn_1_1scan__error.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>code</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>good</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9abe580874d2083db8d40e483a204c6810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>end_of_range</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a5bd386cea105b197913afd1795a30cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalid_format_string</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a28497597134fa03a4f35abda44d2b41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalid_scanned_value</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a1cab3dc5c02b44c825c41a06db524cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value_out_of_range</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a15171fc8941f02fe7d8e1509d98f2e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>good</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9abe580874d2083db8d40e483a204c6810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>end_of_range</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a5bd386cea105b197913afd1795a30cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalid_format_string</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a28497597134fa03a4f35abda44d2b41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>invalid_scanned_value</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a1cab3dc5c02b44c825c41a06db524cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value_out_of_range</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a0e12e10c5a0b3cabc6a530bdedc438d9a15171fc8941f02fe7d8e1509d98f2e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>scan_error</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a33c40821b1d0a145335ee43cef0fa75d</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>scan_error</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a2f08c4a0ec7812b10fffab9cd70a2686</anchor>
      <arglist>(code_t c, const char *m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>af2f75805eb8211d7f98017aa64a14720</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr code_t</type>
      <name>code</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>a4da617ce5b605b593e1d999035bcb6f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>msg</name>
      <anchorfile>classscn_1_1scan__error.html</anchorfile>
      <anchor>aadebf39452369ab887d3eda8ba0a30ce</anchor>
      <arglist>() const noexcept -&gt; const char *</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>scn::scan_expected</name>
    <filename>structscn_1_1scan__expected.html</filename>
    <templarg></templarg>
    <base>expected&lt; T, scan_error &gt;</base>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>emplace</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>af56e7e1f1caa4e01f15310fe32ac48df</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr error_type &amp;</type>
      <name>error</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a1cf23a75fd9e87a66d4e5539e0d3b968</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr U &amp;</type>
      <name>value</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>aa759914c72bd6b9137bff5073d8ced85</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr U &amp;</type>
      <name>operator*</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a07d7a97f1258d71bc27d2810f8278639</anchor>
      <arglist>() &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>value_or</name>
      <anchorfile>classscn_1_1expected.html</anchorfile>
      <anchor>a6d9136e7cdeb7bbc8a8681a18cb807a9</anchor>
      <arglist>(U &amp;&amp;default_value) const &amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>scn::scanner</name>
    <filename>structscn_1_1scanner.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>scanner&lt; CharT, T &gt;</name>
    <filename>structscn_1_1scanner.html</filename>
  </compound>
  <compound kind="class">
    <name>scanner&lt; T, CharT &gt;</name>
    <filename>structscn_1_1scanner.html</filename>
  </compound>
  <compound kind="struct">
    <name>scn::scanner&lt; T, CharT, std::enable_if_t&lt; detail::arg_type_constant&lt; T, CharT &gt;::value !=detail::arg_type::custom_type &amp;&amp;!detail::is_type_disabled&lt; T &gt; &gt; &gt;</name>
    <filename>structscn_1_1scanner_3_01_t_00_01_char_t_00_01std_1_1enable__if__t_3_01detail_1_1arg__type__cons3aa1d3b11a8950d2c816ed76e7e2c811.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>scn::span</name>
    <filename>classscn_1_1span.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>scn</name>
    <filename>namespacescn.html</filename>
    <namespace>scn::detail</namespace>
    <class kind="struct">scn::monostate</class>
    <class kind="class">scn::basic_scan_arg</class>
    <class kind="class">scn::scan_arg_store</class>
    <class kind="class">scn::basic_scan_args</class>
    <class kind="class">scn::basic_scan_context</class>
    <class kind="class">scn::basic_format_string</class>
    <class kind="struct">scn::basic_istream_scanner</class>
    <class kind="class">scn::basic_scan_parse_context</class>
    <class kind="struct">scn::scanner</class>
    <class kind="struct">scn::discard</class>
    <class kind="class">scn::span</class>
    <class kind="class">scn::scan_error</class>
    <class kind="struct">scn::invalid_input_range</class>
    <class kind="struct">scn::scanner&lt; T, CharT, std::enable_if_t&lt; detail::arg_type_constant&lt; T, CharT &gt;::value !=detail::arg_type::custom_type &amp;&amp;!detail::is_type_disabled&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">scn::scan_expected</class>
    <class kind="class">scn::expected</class>
    <member kind="typedef">
      <type>scan_expected&lt; scan_result&lt; borrowed_subrange_with_sentinel_t&lt; Range &gt;, Args... &gt; &gt;</type>
      <name>scan_result_type</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>a69cd7fb430db69e9ed4d8b76e0ac45f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scan_expected&lt; borrowed_subrange_with_sentinel_t&lt; Range &gt; &gt;</type>
      <name>vscan_result</name>
      <anchorfile>group__vscan.html</anchorfile>
      <anchor>ga6a39b056a6335f4624f8d3c6cff36bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>visit_scan_arg</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>aaef2be62bdb069536e2729b6bb4d7f1c</anchor>
      <arglist>(Visitor &amp;&amp;vis, basic_scan_arg&lt; Ctx &gt; &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>make_scan_args</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>abfa0ace2ff551e76af6128040195010d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>make_scan_args</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>a47bcbc8d33e38e412b1f87ec7ed3cc96</anchor>
      <arglist>(std::tuple&lt; Args... &gt; &amp;&amp;values)</arglist>
    </member>
    <member kind="function">
      <type>detail::basic_runtime_format_string&lt; char &gt;</type>
      <name>runtime_format</name>
      <anchorfile>group__format-string.html</anchorfile>
      <anchor>ga014577dcd48ad3a5658203de948a9579</anchor>
      <arglist>(std::string_view s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_scan_result</name>
      <anchorfile>group__result.html</anchorfile>
      <anchor>ga7b1bca208e0e0e9625627991e9fe2ab1</anchor>
      <arglist>(scan_expected&lt; ResultRange &gt; &amp;&amp;result, scan_arg_store&lt; Context, Args... &gt; &amp;&amp;args) -&gt; scan_expected&lt; scan_result&lt; ResultRange, Args... &gt;&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga1038d2b8ee0cd6fbecdd1f569a000a79</anchor>
      <arglist>(Source &amp;&amp;source, wformat_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga871576cd1220edcb37b41d2233ec1c9a</anchor>
      <arglist>(Source &amp;&amp;source, wformat_string&lt; Args... &gt; format, std::tuple&lt; Args... &gt; &amp;&amp;args) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__locale.html</anchorfile>
      <anchor>ga5dfc1e4814761e718e838e77bad69cb1</anchor>
      <arglist>(const Locale &amp;loc, Source &amp;&amp;source, wformat_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__locale.html</anchorfile>
      <anchor>gabcb08a60adc08c457e71f37d00535242</anchor>
      <arglist>(const Locale &amp;loc, Source &amp;&amp;source, wformat_string&lt; Args... &gt; format, std::tuple&lt; Args... &gt; &amp;&amp;args) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan_value</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>gaad8ea03c53fc8eda13f7c2d1a7381b07</anchor>
      <arglist>(Source &amp;&amp;source) -&gt; scan_result_type&lt; Source, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan_value</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>gad6f64551ee4609a1c20e72163a1347f1</anchor>
      <arglist>(Source &amp;&amp;source, T default_value) -&gt; scan_result_type&lt; Source, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>input</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga0279ea6b63314d16c81198b69147ef10</anchor>
      <arglist>(format_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; std::FILE *, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>prompt</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga042146afcbd02488d2daa6be0ea3e6af</anchor>
      <arglist>(const char *msg, format_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; std::FILE *, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan_int</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>abc01dfea9c68651aa1663d24ba843c84</anchor>
      <arglist>(std::string_view source, int base=10) -&gt; scan_result_type&lt; std::string_view, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan_int_exhaustive_valid</name>
      <anchorfile>namespacescn.html</anchorfile>
      <anchor>a75b7263129ec499db37ea67eb01eab30</anchor>
      <arglist>(std::string_view source) -&gt; T</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vscan</name>
      <anchorfile>group__vscan.html</anchorfile>
      <anchor>gad85da110d326532f413f9c81d9fb413b</anchor>
      <arglist>(Range &amp;&amp;range, std::string_view format, scan_args args) -&gt; vscan_result&lt; Range &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vscan</name>
      <anchorfile>group__locale.html</anchorfile>
      <anchor>gacf7e7ababa2e8ff7b89b9cae2de8ac48</anchor>
      <arglist>(const Locale &amp;loc, Range &amp;&amp;range, std::string_view format, scan_args args) -&gt; vscan_result&lt; Range &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vscan_value</name>
      <anchorfile>group__vscan.html</anchorfile>
      <anchor>gab44a09eadf35d1618a236b6c845e19e2</anchor>
      <arglist>(Range &amp;&amp;range, basic_scan_arg&lt; scan_context &gt; arg) -&gt; vscan_result&lt; Range &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>scn::detail</name>
    <filename>namespacescn_1_1detail.html</filename>
    <class kind="class">scn::detail::compile_parse_context</class>
    <class kind="struct">scn::detail::basic_runtime_format_string</class>
    <class kind="class">scn::detail::basic_range_streambuf</class>
    <member kind="function">
      <type>constexpr T</type>
      <name>max</name>
      <anchorfile>namespacescn_1_1detail.html</anchorfile>
      <anchor>ad0498f5a1a64cb0a5af97bf3e649d660</anchor>
      <arglist>(T a, T b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr It</type>
      <name>min_element</name>
      <anchorfile>namespacescn_1_1detail.html</anchorfile>
      <anchor>ab59057043969a167570dafac73b133ac</anchor>
      <arglist>(It first, It last)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>min</name>
      <anchorfile>namespacescn_1_1detail.html</anchorfile>
      <anchor>a0bfc48d41e8fab217cecf6ab5fc20fa3</anchor>
      <arglist>(T a, T b) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>scan</name>
    <title>Basic scanning API</title>
    <filename>group__scan.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga1038d2b8ee0cd6fbecdd1f569a000a79</anchor>
      <arglist>(Source &amp;&amp;source, wformat_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga871576cd1220edcb37b41d2233ec1c9a</anchor>
      <arglist>(Source &amp;&amp;source, wformat_string&lt; Args... &gt; format, std::tuple&lt; Args... &gt; &amp;&amp;args) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan_value</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>gaad8ea03c53fc8eda13f7c2d1a7381b07</anchor>
      <arglist>(Source &amp;&amp;source) -&gt; scan_result_type&lt; Source, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan_value</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>gad6f64551ee4609a1c20e72163a1347f1</anchor>
      <arglist>(Source &amp;&amp;source, T default_value) -&gt; scan_result_type&lt; Source, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>input</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga0279ea6b63314d16c81198b69147ef10</anchor>
      <arglist>(format_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; std::FILE *, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>prompt</name>
      <anchorfile>group__scan.html</anchorfile>
      <anchor>ga042146afcbd02488d2daa6be0ea3e6af</anchor>
      <arglist>(const char *msg, format_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; std::FILE *, Args... &gt;</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ctx</name>
    <title>Contexts and scanners</title>
    <filename>group__ctx.html</filename>
    <class kind="struct">scn::scanner</class>
    <class kind="class">scn::basic_scan_context</class>
    <class kind="class">scn::basic_scan_parse_context</class>
    <class kind="struct">scn::scanner&lt; T, CharT, std::enable_if_t&lt; detail::arg_type_constant&lt; T, CharT &gt;::value !=detail::arg_type::custom_type &amp;&amp;!detail::is_type_disabled&lt; T &gt; &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>format-string</name>
    <title>Format strings</title>
    <filename>group__format-string.html</filename>
    <class kind="struct">scn::detail::basic_runtime_format_string</class>
    <class kind="class">scn::basic_format_string</class>
    <member kind="function">
      <type>detail::basic_runtime_format_string&lt; char &gt;</type>
      <name>runtime_format</name>
      <anchorfile>group__format-string.html</anchorfile>
      <anchor>ga014577dcd48ad3a5658203de948a9579</anchor>
      <arglist>(std::string_view s)</arglist>
    </member>
    <docanchor file="group__format-string.html" title="Argument IDs">arg-ids</docanchor>
    <docanchor file="group__format-string.html" title="Width">width</docanchor>
    <docanchor file="group__format-string.html" title="Localized">localized</docanchor>
    <docanchor file="group__format-string.html" title="Type specifier">type</docanchor>
    <docanchor file="group__format-string.html" title="Type specifier: strings">type-string</docanchor>
    <docanchor file="group__format-string.html">type-string-table</docanchor>
    <docanchor file="group__format-string.html" title="Type specifier: integers">type-int</docanchor>
    <docanchor file="group__format-string.html">type-int-table</docanchor>
    <docanchor file="group__format-string.html" title="Type specifier: characters">type-char</docanchor>
    <docanchor file="group__format-string.html">type-char-table</docanchor>
    <docanchor file="group__format-string.html" title="Type specifier: floating-point values">type-float</docanchor>
    <docanchor file="group__format-string.html">type-float-table</docanchor>
    <docanchor file="group__format-string.html" title="Type specifier: booleans">type-bool</docanchor>
    <docanchor file="group__format-string.html">type-bool-table</docanchor>
  </compound>
  <compound kind="group">
    <name>locale</name>
    <title>Localization</title>
    <filename>group__locale.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__locale.html</anchorfile>
      <anchor>ga5dfc1e4814761e718e838e77bad69cb1</anchor>
      <arglist>(const Locale &amp;loc, Source &amp;&amp;source, wformat_string&lt; Args... &gt; format) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>scan</name>
      <anchorfile>group__locale.html</anchorfile>
      <anchor>gabcb08a60adc08c457e71f37d00535242</anchor>
      <arglist>(const Locale &amp;loc, Source &amp;&amp;source, wformat_string&lt; Args... &gt; format, std::tuple&lt; Args... &gt; &amp;&amp;args) -&gt; scan_result_type&lt; Source, Args... &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vscan</name>
      <anchorfile>group__locale.html</anchorfile>
      <anchor>gacf7e7ababa2e8ff7b89b9cae2de8ac48</anchor>
      <arglist>(const Locale &amp;loc, Range &amp;&amp;range, std::string_view format, scan_args args) -&gt; vscan_result&lt; Range &gt;</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>result</name>
    <title>Result types</title>
    <filename>group__result.html</filename>
    <class kind="class">scn::scan_error</class>
    <class kind="struct">scn::scan_expected</class>
    <class kind="class">scn::expected</class>
    <member kind="function">
      <type>auto</type>
      <name>make_scan_result</name>
      <anchorfile>group__result.html</anchorfile>
      <anchor>ga7b1bca208e0e0e9625627991e9fe2ab1</anchor>
      <arglist>(scan_expected&lt; ResultRange &gt; &amp;&amp;result, scan_arg_store&lt; Context, Args... &gt; &amp;&amp;args) -&gt; scan_expected&lt; scan_result&lt; ResultRange, Args... &gt;&gt;</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>vscan</name>
    <title>Type-erased scanning API</title>
    <filename>group__vscan.html</filename>
    <member kind="typedef">
      <type>scan_expected&lt; borrowed_subrange_with_sentinel_t&lt; Range &gt; &gt;</type>
      <name>vscan_result</name>
      <anchorfile>group__vscan.html</anchorfile>
      <anchor>ga6a39b056a6335f4624f8d3c6cff36bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vscan</name>
      <anchorfile>group__vscan.html</anchorfile>
      <anchor>gad85da110d326532f413f9c81d9fb413b</anchor>
      <arglist>(Range &amp;&amp;range, std::string_view format, scan_args args) -&gt; vscan_result&lt; Range &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vscan_value</name>
      <anchorfile>group__vscan.html</anchorfile>
      <anchor>gab44a09eadf35d1618a236b6c845e19e2</anchor>
      <arglist>(Range &amp;&amp;range, basic_scan_arg&lt; scan_context &gt; arg) -&gt; vscan_result&lt; Range &gt;</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>xchar</name>
    <title>Wide character APIs</title>
    <filename>group__xchar.html</filename>
  </compound>
  <compound kind="page">
    <name>guide</name>
    <title>Guide</title>
    <filename>guide.html</filename>
    <docanchor file="guide.html" title="Basic usage">basic</docanchor>
    <docanchor file="guide.html" title="Error handling and return values">errors</docanchor>
    <docanchor file="guide.html" title="Standard streams and &lt;tt&gt;stdin&lt;/tt&gt;">stdin</docanchor>
    <docanchor file="guide.html" title="Format string">format</docanchor>
    <docanchor file="guide.html" title="&lt;tt&gt;scn::scan_value&lt;/tt&gt;">scan_value</docanchor>
    <docanchor file="guide.html" title="Unicode and wide source ranges">unicode</docanchor>
    <docanchor file="guide.html" title="User types">usertypes</docanchor>
    <docanchor file="guide.html" title="Localization">locale</docanchor>
  </compound>
  <compound kind="page">
    <name>migration-2-0</name>
    <title>Migration Guide v1.1 -&gt; v2.0</title>
    <filename>migration-2-0.html</filename>
    <docanchor file="migration-2-0.html" title="C++17 required">cpp17</docanchor>
    <docanchor file="migration-2-0.html" title="Header files changed">headers</docanchor>
    <docanchor file="migration-2-0.html" title="&lt;tt&gt;scan_&lt;/tt&gt; prefix added to many names inside the &lt;tt&gt;scn&lt;/tt&gt; namespace">scan_prefix</docanchor>
    <docanchor file="migration-2-0.html" title="&lt;tt&gt;scn::scan&lt;/tt&gt; argument passing and return value">scan_arg_passing</docanchor>
    <docanchor file="migration-2-0.html" title="No more &quot;indirect&quot; ranges: revamped source range error handling">indirect</docanchor>
    <docanchor file="migration-2-0.html" title="Relaxed source range requirements">range-requirements</docanchor>
    <docanchor file="migration-2-0.html" title="Returned ranges do not take ownership (may return &lt;tt&gt;dangling&lt;/tt&gt;)">ownership</docanchor>
    <docanchor file="migration-2-0.html" title="Files removed">files</docanchor>
    <docanchor file="migration-2-0.html" title="Specializing &lt;tt&gt;scn::scanner&lt;/tt&gt; changed">scanner-specialize</docanchor>
    <docanchor file="migration-2-0.html" title="&lt;tt&gt;scn::scan_usertype&lt;/tt&gt; removed">scan_usertype</docanchor>
    <docanchor file="migration-2-0.html" title="&lt;tt&gt;scn::*_parser&lt;/tt&gt; removed">parser</docanchor>
    <docanchor file="migration-2-0.html" title="Including &lt;tt&gt;&lt;scn/istream.h&gt;&lt;/tt&gt; no longer enables custom scanning for types with &lt;tt&gt;operator&gt;&gt;&lt;/tt&gt; by default">istream-operator</docanchor>
    <docanchor file="migration-2-0.html" title="&lt;tt&gt;scn::scan_localized&lt;/tt&gt; renamed to &lt;tt&gt;scn::scan&lt;/tt&gt;">scan_localized</docanchor>
    <docanchor file="migration-2-0.html" title="List operations removed">lists</docanchor>
    <docanchor file="migration-2-0.html" title="&lt;tt&gt;scn::ignore&lt;/tt&gt; and &lt;tt&gt;scn::getline&lt;/tt&gt; removed">ignore-getline</docanchor>
    <docanchor file="migration-2-0.html" title="Encoding is always Unicode">encoding</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>scnlib</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="About this documentation">about</docanchor>
    <docanchor file="index.html" title="Installation">install</docanchor>
    <docanchor file="index.html" title="Dependencies">deps</docanchor>
    <docanchor file="index.html" title="Tests and benchmarks">tests</docanchor>
    <docanchor file="index.html" title="Without CMake">without-cmake</docanchor>
    <docanchor file="index.html" title="License">license</docanchor>
  </compound>
</tagfile>
